# Generated by Django 3.0.8 on 2020-07-23 05:25

import datetime
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import tests.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Complexity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Сложность')),
            ],
        ),
        migrations.CreateModel(
            name='TypeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Имя категории')),
            ],
        ),
        migrations.CreateModel(
            name='TypeQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Тип вопроса')),
            ],
        ),
        migrations.CreateModel(
            name='TestMassif',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=30, verbose_name='Соотв-е тесту')),
                ('question', models.CharField(max_length=1000, verbose_name='Вопрос')),
                ('text_answers_json', jsonfield.fields.JSONField(blank=True, verbose_name='Текст:ответы #JSON')),
                ('insert_json', jsonfield.fields.JSONField(blank=True, verbose_name='Placeholders для insert #JSON')),
                ('choise_json', jsonfield.fields.JSONField(blank=True, verbose_name='Варианты для choise #JSON')),
                ('order_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=34), default=list, size=None, verbose_name='Порядок слов order #JSON')),
                ('theory_json', jsonfield.fields.JSONField(blank=True, verbose_name='Теория #JSON')),
                ('style_type', models.CharField(blank=True, choices=[('T', 'text'), ('D', 'dialog'), ('C', 'text_center')], max_length=1, verbose_name='Стиль отображения')),
                ('examples_json', jsonfield.fields.JSONField(blank=True, verbose_name='Пример #JSON')),
                ('logotype', models.ImageField(blank=True, null=True, upload_to='question_images/', verbose_name='URL логотипа')),
                ('type_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.TypeQuestion')),
            ],
            options={
                'verbose_name_plural': 'Общий список вопросов',
            },
        ),
        migrations.CreateModel(
            name='ListTests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название теста')),
                ('logo_test', models.ImageField(blank=True, help_text='...', upload_to=tests.models.ListTests.change_filename, verbose_name='Лого теста')),
                ('quantity', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Количество')),
                ('description', models.TextField(max_length=1000, verbose_name='Описание')),
                ('if_pay', models.BooleanField(default=False, verbose_name='Платный')),
                ('price', models.SmallIntegerField(default=0, null=True, verbose_name='Цена')),
                ('date', models.DateField(default=datetime.date.today, verbose_name='Дата создания')),
                ('slug', models.SlugField(blank=True)),
                ('complexity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.Complexity')),
                ('test_items', models.ManyToManyField(blank=True, to='tests.TestMassif')),
                ('type_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.TypeCategory')),
            ],
            options={
                'verbose_name_plural': 'Список тестов',
            },
        ),
    ]
